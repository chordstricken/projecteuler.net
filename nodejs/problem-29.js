/*
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/

// multiplies a num array
function multiply(num, times) {
    var result = new Array(num.length).fill(0);

    // add num to itself repeatedly
    while (times-- > 0) {
        // iterate backwards over array
        var c = 0;
        for (var i = num.length - 1; i >= 0; i--) {
            result[i] += num[i] + c;
            c = result[i] >= 10;
            result[i] = result[i] % 10; // perform modulo to set back to a single digit
        }
        if (c) {
            result.unshift(1); // add carry int to the result array
            num.unshift(0); // add 0 carry int to num array to ensure both arrays always have same length
        }
    }
    return result;
}

/**
 * Equivalent of Math.pow() except the number is expressed as an array
 */
function pow(n, p, o) {
    o = o || n;
    if (typeof(n) !== 'object')
        n = n.toString().split('').map(Math.floor);

    if (p === 1)
        return n.join('');

    return pow(multiply(n, o), --p, o);
}

var resultMap = {};

for (var a = 2; a <= 100; a++) {
    console.log(a);
    for (var b = 2; b <= 100; b++)
        resultMap[pow(a,b)] = 1;
}

console.log(Object.keys(resultMap).length);
